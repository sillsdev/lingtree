# This workflow will build a Java project with Ant

name: macOS Build Installer with Version and sign

env:
  NOTARIZE_PASSWORD: ${{ secrets.SIL_APPLE_NOTARIZATION_PASSWORD }}
  NOTARIZE_APPLE_ID: ${{ secrets.SIL_APPLE_NOTARIZATION_USERNAME }}
  NOTARIZE_TEAM_ID: ${{ secrets.SIL_APPLE_NOTARIZATION_USERNAME }}
#  NOTARIZE_PASSWORD: ${{ secrets.NOTARIZE_PASSWORD }}
#  NOTARIZE_APPLE_ID: ${{ secrets.NOTARIZE_APPLE_ID }}
#  NOTARIZE_TEAM_ID: ${{ secrets.NOTARIZE_TEAM_ID }}


on:
  push:
    branches: [ "buildSignMacOS" ]
#    tags:
#      - 'v*'  # Build the app for commits that are tagged starting with 'v' e.g. v1.2.3
      # to tag a commit, use "git tag v1.2.3"
      # when you then use "git push origin v1.2.3" this workflow will be invoked
#  workflow_dispatch:

jobs:
  build-installer:

    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'

      - name: Set VERSION (e.g. 1.0.0) and FULL_VERSION (e.g. 1.0.0-abcdef4)
        run: |
          VERSION="1.6.3"
          SHORT_SHA=$(git rev-parse --short HEAD)
          FULL_VERSION="-macOS"
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "FULL_VERSION=${FULL_VERSION}" >> $GITHUB_ENV
#          VERSION="${GITHUB_REF#refs/tags/v}"
#          SHORT_SHA=$(git rev-parse --short HEAD)
#          FULL_VERSION="${VERSION}-${SHORT_SHA}"
        shell: bash

      - name: Validate version format
        run: |
          echo ${VERSION}
          if [[ ! "${VERSION}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Version format is incorrect. It should match N.N.N where N is an integer."
            exit 1
          fi
        shell: bash
#      - name: Build version ${{ env.VERSION }}
#      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'zulu'
          java-package: 'jdk+fx'
      - name: Build with Ant
        run: |
          ant -noinput -buildfile build.xml
        shell: bash
      - name: Run the macOS installer script
        run: |
          cd installer/macos
          chmod +x *.sh
          ./BuildMacOS.sh ${{ env.VERSION }}
        shell: bash
      - name: Rename dmg file with version and architecture
        env:
          PUBLISH_PATH: 'installer/macos'
        run: |
          ls -l ${{env.PUBLISH_PATH}}
          mv ${{env.PUBLISH_PATH}}/LingTree-${{ env.VERSION }}.dmg LingTree-${{ env.VERSION }}.dmg

      - uses: actions/upload-artifact@v4
        with:
          name: LingTree
          path: LingTree-*.dmg
          if-no-files-found: error

  sign-installer:
    name: Sign LingTree installer
    needs: build-installer
    runs-on: macos-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v4
        with:
          name: LingTree

#      - name: Sign and notarize the release build
#        uses: toitlang/action-macos-sign-notarize@v1.2.0
#        with:
#          certificate: ${{ secrets.CERT_TEST }}
#          certificate-password: ${{ secrets.SIL_APPLE_DEVELOPER_ID_APPLICATION_PASSWORD }}
#          username: ${{ secrets.SIL_APPLE_NOTARIZATION_USERNAME }}
#          password: ${{ secrets.SIL_APPLE_NOTARIZATION_PASSWORD }}
#          apple-team-id: "3YE4W86L3G" # ${{ vars.APPLE_TEAM_ID }}
#          app-path: LingTree-${{ env.VERSION }}.dmg

#      # Set up keychain and import certificate
#      - name: Set up keychain
#        env:
#          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
#          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
#          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
#        run: |
#          # Create a temporary keychain
#          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
#          security default-keychain -s build.keychain
#          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
#
#          # Import the certificate
#          echo "$MACOS_CERTIFICATE" | base64 --decode > certificate.p12
#          security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
#
#          # Allow codesign to access the certificate without prompts
#          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain

      # Get notarization log of last run
      - name: Get notarization log
        run: |
          echo Before trying to get notarization log of last run
          xcrun notarytool log 48767c4e-bc1b-4ce3-b967-6aa418527778 --apple-id ${{ secrets.SIL_APPLE_NOTARIZATION_USERNAME }} --team-id "3YE4W86L3G" --password ${{ secrets.SIL_APPLE_NOTARIZATION_PASSWORD }}

      - name: Add certificate to Keychain
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.SIL_APPLE_DEVELOPER_ID_APPLICATION_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.SIL_APPLE_DEVELOPER_ID_APPLICATION_PASSWORD }}
        run: |
          # Create a temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain

          # Import the certificate
          curl -O ${{ secrets.SIL_APPLE_DEVELOPER_ID_APPLICATION_CERT_URL }}
          security import sil_developer_id_application_cert.p12 -k build.keychain -P ${{ secrets.SIL_APPLE_DEVELOPER_ID_APPLICATION_PASSWORD }} -T /usr/bin/codesign

          # Allow codesign to access the certificate without prompts
          #echo before allow codesign to access the certificate without prompts
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          #echo after allow codesign to access the certificate without prompts

      - name: Attach dmg
        run: |
          yes | PAGER=cat hdiutil attach LingTree-*.dmg
          echo
          echo ls
          ls /Volumes/LingTree

      - name: Sign dmg and app
        run: |
          #echo make sure xkbswitch is executable
          mkdir dmgContents
          cp -R /Volumes/LingTree dmgContents
          cd dmgContents/LingTree
          #pwd
          chmod a+w LingTree.app/Contents/app/resources/Keyboards/macOS/xkbswitch
          #echo sign xkbswitch
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime  LingTree.app/Contents/app/resources/Keyboards/macOS/xkbswitch -v
          #echo before updating xkbswitch in lingtree.jar
          cd LingTree.app/Contents/app/
          jar uf lingtree.jar resources/Keyboards/macOS/xkbswitch
          #echo before updating libjnidispatch.jnilib in jna
          cd libs/jna/
          jar xf jna-5.11.0.jar com/sun/jna/darwin-aarch64/libjnidispatch.jnilib
          #echo sign jna
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime com/sun/jna/darwin-aarch64/libjnidispatch.jnilib -v
          #echo update jna
          jar uf jna-5.11.0.jar com/sun/jna/darwin-aarch64/libjnidispatch.jnilib
          cd ../../../../..
          #pwd
          echo sign LingTree.app/Contents/MacOS/LingTree
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/MacOS/LingTree -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libnet.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libnet.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libnio.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libnio.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libinstrument.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libinstrument.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libjavafx_iio.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libjavafx_iio.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libzip.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libzip.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libfreetype.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libfreetype.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libjli.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libjli.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libsplashscreen.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libsplashscreen.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libmanagement_ext.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libmanagement_ext.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libdt_socket.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libdt_socket.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libj2pkcs11.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libj2pkcs11.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libjimage.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libjimage.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libjfxmedia_avf.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libjfxmedia_avf.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libosxkrb5.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libosxkrb5.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libosxui.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libosxui.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libglib-lite.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libglib-lite.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libmanagement_agent.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libmanagement_agent.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/librmi.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/librmi.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libjdwp.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libjdwp.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libawt_lwawt.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libawt_lwawt.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libfxplugins.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libfxplugins.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libglass.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libglass.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libjavajpeg.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libjavajpeg.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libmlib_image.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libmlib_image.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libjavafx_font.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libjavafx_font.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libmanagement.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libmanagement.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libmanagement.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libmanagement.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libgstreamer-lite.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libgstreamer-lite.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libjsound.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libjsound.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libjfxwebkit.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libjfxwebkit.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libj2pcsc.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libj2pcsc.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libjsig.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libjsig.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libprefs.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libprefs.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libsyslookup.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libsyslookup.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libjawt.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libjawt.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libattach.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libattach.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libprism_common.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libprism_common.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libprism_es2.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libprism_es2.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libfontmanager.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libfontmanager.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/jspawnhelper
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/jspawnhelper -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libosxsecurity.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libosxsecurity.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libextnet.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libextnet.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libdecora_sse.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libdecora_sse.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libjaas.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libjaas.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/liblcms.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/liblcms.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libverify.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libverify.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libj2gss.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libj2gss.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libjava.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libjava.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libawt.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libawt.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libosx.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libosx.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libjfxmedia.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libjfxmedia.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libprism_sw.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libprism_sw.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/libosxapp.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/libosxapp.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/server/libjvm.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/server/libjvm.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/Home/lib/server/libjsig.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/Home/lib/server/libjsig.dylib -v
          echo sign LingTree.app/Contents/runtime/Contents/MacOS/libjli.dylib
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTree.app/Contents/runtime/Contents/MacOS/libjli.dylib -v
          echo sign LingTree.app
          codesign --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime --deep LingTree.app -v
          echo verify the app
          codesign -vvv --deep --strict LingTree.app
          #cd ../..
          #echo recreate dmg
          hdiutil create -volname LingTreeInstaller -srcfolder LingTree.app -ov -format UDZO LingTreeSigned.dmg
          echo sign dmg
          codesign --deep --force --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" --timestamp --options runtime LingTreeSigned.dmg -v
          #echo rename to include version number
          #mv LingTreeSigned.dmg LingTree-${{ env.VERSION }}.dmg

      # Verify the signature
      - name: Verify signature
        run: |
          codesign --verify --verbose LingTreeSigned.dmg

#      # Clean up keychain
#      - name: Clean up keychain
#        if: always()
#        run: |
#          security delete-keychain build.keychain || true

     # Notarize the DMG
      - name: Notarize DMG
        uses: lando/notarize-action@v2
        with:
          product-path: LingTreeSigned.dmg
          appstore-connect-username: ${{ secrets.SIL_APPLE_NOTARIZATION_USERNAME }}
          appstore-connect-password: ${{ secrets.SIL_APPLE_NOTARIZATION_PASSWORD }}
          appstore-connect-team-id: "3YE4W86L3G"
          verbose: true
#          appstore-connect-team-id: ${{ secrets.APPLE_TEAM_ID }}

      # Staple the notarization ticket
      - name: Staple Notarization Ticket
        run: |
          echo before stapling
          xcrun stapler staple LingTreeSigned.dmg
          echo after stapling

#      - name: "Notarize app bundle"
#        # Extract the secrets we defined earlier as environment variables
#        env:
#          PROD_MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.SIL_APPLE_NOTARIZATION_USERNAME }}
#          PROD_MACOS_NOTARIZATION_TEAM_ID: "3YE4W86L3G"
#          PROD_MACOS_NOTARIZATION_PWD: ${{ secrets.SIL_APPLE_NOTARIZATION_PASSWORD }}
#        run: |
#          xcrun notarytool submit LingTreeSigned.dmg --keychain-profile "notary-profile" --wait
#          xcrun stapler staple LingTreeSigned.dmg
#          # Store the notarization credentials so that we can prevent a UI password dialog
#          # from blocking the CI
#
#          echo "Create keychain profile"
#          xcrun notarytool store-credentials "notarytool-profile" --apple-id "$PROD_MACOS_NOTARIZATION_APPLE_ID" --team-id "$PROD_MACOS_NOTARIZATION_TEAM_ID" --password "$PROD_MACOS_NOTARIZATION_PWD"
#
#          # We can't notarize an app bundle directly, but we need to compress it as an archive.
#          # Therefore, we create a zip file containing our app bundle, so that we can send it to the
#          # notarization service
#
#          echo "Creating temp notarization archive"
#          ditto -c -k --keepParent "LingTreeSigned.dmg" "notarization.zip"
#          #ditto -c -k --keepParent "dmgContents/LingTree/LingTree.app" "notarization.zip"
#          #ditto -c -k --keepParent "target/mac/Espanso.app" "notarization.zip"
#          echo app file is
#          ls -l LingTreeSigned.dmg
#          echo zipped file is
#          ls -l notarization.zip
#          echo check signature
#          #codesign -vvv --deep --strict LingTreeSigned.dmg

##          echo Download a log file from a previously failed run
##          xcrun notarytool log c43c4c48-517e-4796-835c-8100aa281aa6 --keychain-profile "notarytool-profile" developer_log.json
##          #xcrun notarytool log c43c4c48-517e-4796-835c-8100aa281aa6 --keychain-profile "notarytool-password" developer_log.json
##          echo Here it is
##          echo ----------------------
##          cat developer_log.json
##          echo ----------------------
#
#          # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
#          # This typically takes a few seconds inside a CI environment, but it might take more depending on the App
#          # characteristics. Visit the Notarization docs for more information and strategies on how to optimize it if
#          # you're curious
#
#          echo "Notarize app"
#          xcrun notarytool submit "notarization.zip" --keychain-profile "notarytool-profile" --wait
#
#          # Finally, we need to "attach the staple" to our executable, which will allow our app to be
#          # validated by macOS even when an internet connection is not available.
#          echo "Attach staple"
#          xcrun stapler staple "LingTreeSigned.dmg"

      # Install PKG Signing Certificate
      # NOTE: Working fork of the original apple-actions/import-codesign-certs
#      - name: Install Apple Developer PKG certificates
#        uses: ssrobins/import-codesign-certs@04ce695a5e6002f1971a8ed78fedd676318f950f
#        with:
#          keychain-password: ${{ secrets.SIL_APPLE_DEVELOPER_ID_APPLICATION_PASSWORD }}
#          p12-file-base64: ${{ secrets.SIL_APPLE_DEVELOPER_ID_APPLICATION_CERT }}
#          p12-password: ${{ secrets.SIL_APPLE_DEVELOPER_ID_APPLICATION_PASSWORD }}
##          keychain-password: ${{ secrets.PKG_KEYCHAIN_PASSWORD }}
##          p12-file-base64: ${{ secrets.PKG_CERTIFICATES_P12 }}
##          p12-password: ${{ secrets.PKG_CERTIFICATES_P12_PASSWORD }}
#
#      - name: Download munkipkg and test it can execute with python3 
#        run: ./.github/workflows/helpers/install_munkipkg.sh
#
#      - name: Run the build_package script 
#        run: ./.github/workflows/helpers/build_package.sh $NOTARIZE_PASSWORD $NOTARIZE_APPLE_ID $NOTARIZE_TEAM_ID
#
#      - name: Get Package Details
#        id: get_package_details
#        run: |
#          echo "PACKAGE_NAME=$(/bin/cat ./uploads/build-name.txt)" >> $GITHUB_ENV
#          echo "PACKAGE_VERSION=$(/bin/cat ./uploads/build-version.txt)" >> $GITHUB_ENV

#      - name: Upload packages to Workflow Artifacts
#        uses: actions/upload-artifact@v4
#        with:
#          name: ${{env.PACKAGE_NAME}}-${{env.PACKAGE_VERSION}}
#          path: |
#            uploads
#            !uploads/*.txt
#          if-no-files-found: error
#    uses: sillsdev/codesign/.github/workflows/sign.yml@v2
#    with:
#      artifact: LingTree
#    secrets:
#      certificate: ${{ secrets.CODESIGN_LSDEVSECTIGOEV }}

  create-release:
    name: Create Release
    needs: sign-installer
    runs-on: macos-latest

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: LingTree

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: LingTree-*.dmg
          body: |
            Release for version ${{ github.ref }}
          draft: true
