# This workflow will build a Java project with Ant

name: macOS Build Installer with Version and sign

env:
  NOTARIZE_PASSWORD: ${{ secrets.SIL_APPLE_NOTARIZATION_PASSWORD }}
  NOTARIZE_APPLE_ID: ${{ secrets.SIL_APPLE_NOTARIZATION_USERNAME }}
  NOTARIZE_TEAM_ID: ${{ secrets.SIL_APPLE_NOTARIZATION_USERNAME }}
#  NOTARIZE_PASSWORD: ${{ secrets.NOTARIZE_PASSWORD }}
#  NOTARIZE_APPLE_ID: ${{ secrets.NOTARIZE_APPLE_ID }}
#  NOTARIZE_TEAM_ID: ${{ secrets.NOTARIZE_TEAM_ID }}


on:
  push:
    branches: [ "buildSignMacOS" ]
#    tags:
#      - 'v*'  # Build the app for commits that are tagged starting with 'v' e.g. v1.2.3
      # to tag a commit, use "git tag v1.2.3"
      # when you then use "git push origin v1.2.3" this workflow will be invoked
#  workflow_dispatch:

jobs:
  build-installer:

    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'

      - name: Set VERSION (e.g. 1.0.0) and FULL_VERSION (e.g. 1.0.0-abcdef4)
        run: |
          VERSION="1.6.3"
          SHORT_SHA=$(git rev-parse --short HEAD)
          FULL_VERSION="-macOS"
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "FULL_VERSION=${FULL_VERSION}" >> $GITHUB_ENV
#          VERSION="${GITHUB_REF#refs/tags/v}"
#          SHORT_SHA=$(git rev-parse --short HEAD)
#          FULL_VERSION="${VERSION}-${SHORT_SHA}"
        shell: bash

      - name: Validate version format
        run: |
          echo ${VERSION}
          if [[ ! "${VERSION}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Version format is incorrect. It should match N.N.N where N is an integer."
            exit 1
          fi
        shell: bash
#      - name: Build version ${{ env.VERSION }}
#      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'zulu'
          java-package: 'jdk+fx'
      - name: Build with Ant
        run: |
          ant -noinput -buildfile build.xml
        shell: bash
      - name: Run the macOS installer script
        run: |
          cd installer/macos
          chmod +x *.sh
          ./BuildMacOS.sh ${{ env.VERSION }}
        shell: bash
      - name: Rename dmg file with version and architecture
        env:
          PUBLISH_PATH: 'installer/macos'
        run: |
          ls -l ${{env.PUBLISH_PATH}}
          mv ${{env.PUBLISH_PATH}}/LingTree-${{ env.VERSION }}.dmg LingTree-${{ env.VERSION }}.dmg

      - uses: actions/upload-artifact@v4
        with:
          name: LingTree
          path: LingTree-*.dmg
          if-no-files-found: error

  sign-installer:
    name: Sign LingTree installer
    needs: build-installer
    runs-on: macos-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v4
        with:
          name: LingTree

#      - name: Sign and notarize the release build
#        uses: toitlang/action-macos-sign-notarize@v1.2.0
#        with:
#          certificate: ${{ secrets.CERT_TEST }}
#          certificate-password: ${{ secrets.SIL_APPLE_DEVELOPER_ID_APPLICATION_PASSWORD }}
#          username: ${{ secrets.SIL_APPLE_NOTARIZATION_USERNAME }}
#          password: ${{ secrets.SIL_APPLE_NOTARIZATION_PASSWORD }}
#          apple-team-id: "3YE4W86L3G" # ${{ vars.APPLE_TEAM_ID }}
#          app-path: LingTree-${{ env.VERSION }}.dmg

      - name: Add certificatee to Keychain
        run: |
          #curl -O "${{ secrets.SIL_APPLE_DEVELOPER_ID_APPLICATION_CERT_URL }}" --user ":${{ secrets.SIL_APPLE_DEVELOPER_ID_APPLICATION_PASSWORD }}"
          curl -O ${{ secrets.SIL_APPLE_DEVELOPER_ID_APPLICATION_CERT_URL }}
          #ls -l
          #curl -O https://sil-mac-codesign.s3.us-east-1.amazonaws.com/sil_developer_id_application_cert.p12
          #ls -l
          #echo trying to import
          echo trying to use the system keychain now
          security import sil_developer_id_application_cert.p12 -P ${{ secrets.SIL_APPLE_DEVELOPER_ID_APPLICATION_PASSWORD }}
          #sudo security import sil_developer_id_application_cert.p12 -P ${{ secrets.SIL_APPLE_DEVELOPER_ID_APPLICATION_PASSWORD }} -k "/Library/Keychains/System.keychain"
          #echo import done

      - name: Attach dmg
        run: |
          yes | PAGER=cat hdiutil attach LingTree-*.dmg
          echo
          echo ls
          ls /Volumes/LingTree

      - name: Sign dmg and app
        run: |
          echo /Volumes/LingTree has
          ls -l /Volumes/LingTree 
          mkdir dmgContents
          cp -R /Volumes/LingTree dmgContents
          echo dmgContents has
          ls -l dmgContents/LingTree
          cd dmgContents/LingTree
          echo ls -l of `pwd`
          ls -l -R
          echo now for what is not there
          ls -l LingTree.app/Contents/app/resources/Keyboards/macOS
          echo sign macOS dir
          codesign --force --options runtime --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" LingTree.app/Contents/app/resources/Keyboards/macOS/xkbswitch
          echo codesign of macOS dir finished
          cd ../..
          echo recreate dmg
          hdiutil create -volname LingTreeInstaller -srcfolder dmgContents -ov -format UDZO LingTreeSigned.dmg
          #ls -l -R
          echo sign dmg
          #codesign --sign --force --deep "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" LingTreeSigned.dmg
          #codesign --force --deep --options runtime --sign "${{ vars.SIL_APPLE_CODESIGN_IDENTITY }}" LingTreeSigned.dmg
          echo rename to include version number
          #mv LingTreeSigned.dmg LingTree-${{ env.VERSION }}.dmg

      - name: "Notarize app bundle"
        # Extract the secrets we defined earlier as environment variables
        env:
          PROD_MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.SIL_APPLE_NOTARIZATION_USERNAME }}
          PROD_MACOS_NOTARIZATION_TEAM_ID: "3YE4W86L3G"
          PROD_MACOS_NOTARIZATION_PWD: ${{ secrets.SIL_APPLE_NOTARIZATION_PASSWORD }}
        run: |
          # Store the notarization credentials so that we can prevent a UI password dialog
          # from blocking the CI

          echo "Create keychain profile"
          xcrun notarytool store-credentials "notarytool-profile" --apple-id "$PROD_MACOS_NOTARIZATION_APPLE_ID" --team-id "$PROD_MACOS_NOTARIZATION_TEAM_ID" --password "$PROD_MACOS_NOTARIZATION_PWD"

          # We can't notarize an app bundle directly, but we need to compress it as an archive.
          # Therefore, we create a zip file containing our app bundle, so that we can send it to the
          # notarization service

          echo "Creating temp notarization archive"
          ditto -c -k --keepParent "LingTreeSigned.dmg" "notarization.zip"
          #ditto -c -k --keepParent "dmgContents/LingTree/LingTree.app" "notarization.zip"
          #ditto -c -k --keepParent "target/mac/Espanso.app" "notarization.zip"
          echo app file is
          ls -l LingTreeSigned.dmg
          echo zipped file is
          ls -l notarization.zip
          echo check signature
          #codesign -vvv --deep --strict LingTreeSigned.dmg 

##          echo Download a log file from a previously failed run
##          xcrun notarytool log c43c4c48-517e-4796-835c-8100aa281aa6 --keychain-profile "notarytool-profile" developer_log.json
##          #xcrun notarytool log c43c4c48-517e-4796-835c-8100aa281aa6 --keychain-profile "notarytool-password" developer_log.json
##          echo Here it is
##          echo ----------------------
##          cat developer_log.json
##          echo ----------------------
#
#          # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
#          # This typically takes a few seconds inside a CI environment, but it might take more depending on the App
#          # characteristics. Visit the Notarization docs for more information and strategies on how to optimize it if
#          # you're curious
#
#          echo "Notarize app"
#          xcrun notarytool submit "notarization.zip" --keychain-profile "notarytool-profile" --wait
#
#          # Finally, we need to "attach the staple" to our executable, which will allow our app to be
#          # validated by macOS even when an internet connection is not available.
#          echo "Attach staple"
#          xcrun stapler staple "LingTreeSigned.dmg"

      # Install PKG Signing Certificate
      # NOTE: Working fork of the original apple-actions/import-codesign-certs
#      - name: Install Apple Developer PKG certificates
#        uses: ssrobins/import-codesign-certs@04ce695a5e6002f1971a8ed78fedd676318f950f
#        with:
#          keychain-password: ${{ secrets.SIL_APPLE_DEVELOPER_ID_APPLICATION_PASSWORD }}
#          p12-file-base64: ${{ secrets.SIL_APPLE_DEVELOPER_ID_APPLICATION_CERT }}
#          p12-password: ${{ secrets.SIL_APPLE_DEVELOPER_ID_APPLICATION_PASSWORD }}
##          keychain-password: ${{ secrets.PKG_KEYCHAIN_PASSWORD }}
##          p12-file-base64: ${{ secrets.PKG_CERTIFICATES_P12 }}
##          p12-password: ${{ secrets.PKG_CERTIFICATES_P12_PASSWORD }}
#
#      - name: Download munkipkg and test it can execute with python3 
#        run: ./.github/workflows/helpers/install_munkipkg.sh
#
#      - name: Run the build_package script 
#        run: ./.github/workflows/helpers/build_package.sh $NOTARIZE_PASSWORD $NOTARIZE_APPLE_ID $NOTARIZE_TEAM_ID
#
#      - name: Get Package Details
#        id: get_package_details
#        run: |
#          echo "PACKAGE_NAME=$(/bin/cat ./uploads/build-name.txt)" >> $GITHUB_ENV
#          echo "PACKAGE_VERSION=$(/bin/cat ./uploads/build-version.txt)" >> $GITHUB_ENV

#      - name: Upload packages to Workflow Artifacts
#        uses: actions/upload-artifact@v4
#        with:
#          name: ${{env.PACKAGE_NAME}}-${{env.PACKAGE_VERSION}}
#          path: |
#            uploads
#            !uploads/*.txt
#          if-no-files-found: error
#    uses: sillsdev/codesign/.github/workflows/sign.yml@v2
#    with:
#      artifact: LingTree
#    secrets:
#      certificate: ${{ secrets.CODESIGN_LSDEVSECTIGOEV }}

  create-release:
    name: Create Release
    needs: sign-installer
    runs-on: macos-latest

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: LingTree

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: LingTree-*.dmg
          body: |
            Release for version ${{ github.ref }}
          draft: true
