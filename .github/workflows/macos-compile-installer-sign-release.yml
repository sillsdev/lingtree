# This workflow will build a Java project with Ant

name: macOS Build Installer with Version and sign

env:
  NOTARIZE_PASSWORD: ${{ secrets.SIL_APPLE_NOTARIZATION_PASSWORD }}
  NOTARIZE_APPLE_ID: ${{ secrets.SIL_APPLE_NOTARIZATION_USERNAME }}
  NOTARIZE_TEAM_ID: ${{ secrets.SIL_APPLE_NOTARIZATION_USERNAME }}
#  NOTARIZE_PASSWORD: ${{ secrets.NOTARIZE_PASSWORD }}
#  NOTARIZE_APPLE_ID: ${{ secrets.NOTARIZE_APPLE_ID }}
#  NOTARIZE_TEAM_ID: ${{ secrets.NOTARIZE_TEAM_ID }}


on:
  push:
    branches: [ "buildSignMacOS" ]
#    tags:
#      - 'v*'  # Build the app for commits that are tagged starting with 'v' e.g. v1.2.3
      # to tag a commit, use "git tag v1.2.3"
      # when you then use "git push origin v1.2.3" this workflow will be invoked
#  workflow_dispatch:

jobs:
  build-installer:

    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'

      - name: Set VERSION (e.g. 1.0.0) and FULL_VERSION (e.g. 1.0.0-abcdef4)
        run: |
          VERSION="1.6.2"
          SHORT_SHA=$(git rev-parse --short HEAD)
          FULL_VERSION="-macOS"
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "FULL_VERSION=${FULL_VERSION}" >> $GITHUB_ENV
#          VERSION="${GITHUB_REF#refs/tags/v}"
#          SHORT_SHA=$(git rev-parse --short HEAD)
#          FULL_VERSION="${VERSION}-${SHORT_SHA}"
        shell: bash

      - name: Validate version format
        run: |
          echo ${VERSION}
          if [[ ! "${VERSION}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Version format is incorrect. It should match N.N.N where N is an integer."
            exit 1
          fi
        shell: bash
#      - name: Build version ${{ env.VERSION }}
#      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'zulu'
          java-package: 'jdk+fx'
      - name: Build with Ant
        run: |
          ant -noinput -buildfile build.xml
        shell: bash
      - name: Run the macOS installer script
        run: |
          cd installer/macos
          chmod +x *.sh
          ./BuildMacOS.sh ${{ env.VERSION }}
        shell: bash
      - name: Rename deb file with version and architecture
        env:
          PUBLISH_PATH: 'installer/macos'
        run: |
          ls -l ${{env.PUBLISH_PATH}}
          mv ${{env.PUBLISH_PATH}}/LingTree-${{ env.VERSION }}.dmg LingTree-${{ env.VERSION }}.dmg

      - uses: actions/upload-artifact@v4
        with:
          name: LingTree
          path: LingTree-*.dmg
          if-no-files-found: error

  sign-installer:
    name: Sign LingTree installer
    needs: build-installer
    runs-on: macos-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v4
        with:
          name: LingTree

      - name: Add certificatee to Keychain
        run: |
          security list-keychains
          #security add-certificate ${{ secrets.SIL_APPLE_DEVELOPER_ID_APPLICATION_CERT }}

      - name: Attach dmg
        run: |
          yes | PAGER=cat hdiutil attach LingTree-*.dmg
          echo
          echo ls
          ls /Volumes/LingTree

      - name: Sign dmg and app

        run: |
          mkdir dmgContent
          cp -R /Volumes/LingTree dmgContents
          # sign the .app,but cannot yet do that
          hdiutil create -volname LingTreeInstaller -srcfolder dmgContents -ov -format UDZO LingTreeNew.dmg
          ls -l
          codesign -s "Developer ID Application: Summer Institute of Linguistics, Inc (SIL) (3YE4W86L3G)" LingTree.app
          codesign -s "Developer ID Application: Summer Institute of Linguistics, Inc (SIL) (3YE4W86L3G)" LingTreeNew.dmg
      # Install PKG Signing Certificate
      # NOTE: Working fork of the original apple-actions/import-codesign-certs
#      - name: Install Apple Developer PKG certificates
#        uses: ssrobins/import-codesign-certs@04ce695a5e6002f1971a8ed78fedd676318f950f
#        with:
#          keychain-password: ${{ secrets.SIL_APPLE_DEVELOPER_ID_APPLICATION_PASSWORD }}
#          p12-file-base64: ${{ secrets.SIL_APPLE_DEVELOPER_ID_APPLICATION_CERT }}
#          p12-password: ${{ secrets.SIL_APPLE_DEVELOPER_ID_APPLICATION_PASSWORD }}
##          keychain-password: ${{ secrets.PKG_KEYCHAIN_PASSWORD }}
##          p12-file-base64: ${{ secrets.PKG_CERTIFICATES_P12 }}
##          p12-password: ${{ secrets.PKG_CERTIFICATES_P12_PASSWORD }}
#
#      - name: Download munkipkg and test it can execute with python3 
#        run: ./.github/workflows/helpers/install_munkipkg.sh
#
#      - name: Run the build_package script 
#        run: ./.github/workflows/helpers/build_package.sh $NOTARIZE_PASSWORD $NOTARIZE_APPLE_ID $NOTARIZE_TEAM_ID
#
#      - name: Get Package Details
#        id: get_package_details
#        run: |
#          echo "PACKAGE_NAME=$(/bin/cat ./uploads/build-name.txt)" >> $GITHUB_ENV
#          echo "PACKAGE_VERSION=$(/bin/cat ./uploads/build-version.txt)" >> $GITHUB_ENV

      - name: Upload packages to Workflow Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.PACKAGE_NAME}}-${{env.PACKAGE_VERSION}}
          path: |
            uploads
            !uploads/*.txt
          if-no-files-found: error
#    uses: sillsdev/codesign/.github/workflows/sign.yml@v2
#    with:
#      artifact: LingTree
#    secrets:
#      certificate: ${{ secrets.CODESIGN_LSDEVSECTIGOEV }}

  create-release:
    name: Create Release
    needs: build-installer
    runs-on: macos-latest

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: LingTree

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: LingTree-*.dmg
          body: |
            Release for version ${{ github.ref }}
          draft: true
